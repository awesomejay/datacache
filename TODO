== ASCII data options ==

Not yet implemented

By default, the .data contains the "data-like" lines of the .out file - lines that start with an integer with no preceding spaces.
* <code>dataLineRegex</code> The default is <code>^[0-9].*</code>.  
* <code>dataLineNormalizerRegex</code> 
* <code>dataLineNormalizerReplace</code>
Any line matching <code>dataLineRegex</code> in the response from the server for a given URL will appear in the .data file.  If both are specified, <code>dataLineNormalizerRegex</code> and <code>dataLineNormalizerReplace</code> are used as below to modify one or more contiguous data lines. 
<source lang="javascript">
fileline.toString()
    .replace(dataLineNormalizerRegex,dataLineNormalizerReplace)
    .split("\n")
    .filter(function(line){return line.search(dataLineRegex)!=-1;})
    .join("\n") + "\n";
</source>
=== Example: Testing a regular expression ===
For verifying regular expressions (for interactive regular expression creation and debugging, see [http://regexpal.com/]), open Chrome or Firefox's debugger and enter values for the first four variables given below.
<source lang="javascript">
fileline      = "";
dataLineRegex = "";
dataLineNormalizerRegex   = "";
dataLineNormalizerReplace = "";
fileline.toString()
    .replace(dataLineNormalizerRegex,dataLineNormalizerReplace)
    .split("\n")
    .filter(function(line){return line.search(dataLineRegex)!=-1;})
    .join("\n") + "\n";
</source>

=== Example: removing bad lines ===

=== Example: data span multiple lines ===
Note that URLs that return ASCII data that spans multiple contiguous lines can be have one or more lines combined.  For example,
<source lang="javascript">
filemultilines1  = "1980    01      02      00      14      00      1\nCMO     -28     13      13";
filemultilines2  = "1980    01      02      00      14      00      1\nCMO     -28     13      13";
filemultiline    = filemultilines1 + "\n" + filemultilines2;
dataLineRegex    = new RegExp(/^([\d]+)\s+([\d]+)\s+([\d]+)\s+([\d]+)\s+([\d]+)\s+([\d]+)\s+([\d]+)/);
dataLineNormalizerRegex   = new RegExp(/\n([a-zA-Z]+)\s+([\d-]+)\s([\d-]+)\s([\d-]+)/g);
dataLineNormalizerReplace = " $2 $3 $4";
twolines = 
filemultiline.toString()
    .replace(dataLineNormalizerRegex,dataLineNormalizerReplace)
    .split("\n")
    .filter(function(line){return line.search(dataLineRegex)!=-1;})
    .join("\n") + "\n";
console.log(filemultilines);
// 1980    01      02      00      14      00      1
// CMO     -28     13      13
// 1980    01      02      00      14      00      1
// CMO     -28     13      13
console.log(twolines);
// 1980    01      02      00      14      00      1 -28 13 13
// 1980    01      02      00      15      00      1 -23 10 9
</source>


Unit tests

curl "http://localhost:8000/sync?includeMeta=true&source=http://cdaweb.gsfc.nasa.gov/tmp/ws18979180951/ac_h1_mfi.txt"
curl "http://localhost:8000/sync?includeMeta=true&forceUpdate=true&source=http://cdaweb.gsfc.nasa.gov/tmp/ws18979180951/ac_h1_mfi.txt"

curl -d "includeMeta=true&source=http%3A%2F%2Fcdaweb.gsfc.nasa.gov%2FWS%2Fcdasr%2F1%2Fdataviews%2Fsp_phys%2Fdatasets%2FAC_H1_MFI%2Fdata%2F20050101T000000Z%2C20050102T000000Z%2FMagnitude%3Fformat%3Dtext" "http://localhost:8000/sync"
curl -d "includeMeta=true" "http://localhost:8000/sync?source=http%3A%2F%2Fcdaweb.gsfc.nasa.gov%2FWS%2Fcdasr%2F1%2Fdataviews%2Fsp_phys%2Fdatasets%2FAC_H1_MFI%2Fdata%2F20050101T000000Z%2C20050102T000000Z%2FMagnitude%3Fformat%3Dtext"

curl -d "includeMeta=true&forceUpdate=true&source=http%3A%2F%2Fcdaweb.gsfc.nasa.gov%2FWS%2Fcdasr%2F1%2Fdataviews%2Fsp_phys%2Fdatasets%2FAC_H1_MFI%2Fdata%2F20050101T000000Z%2C20050102T000000Z%2FMagnitude%3Fformat%3Dtext" "http://localhost:8000/sync"
curl -d "includeMeta=true&return=json&forceUpdate=false" "http://localhost:8000/sync?source=http%3A%2F%2Fcdaweb.gsfc.nasa.gov%2FWS%2Fcdasr%2F1%2Fdataviews%2Fsp_phys%2Fdatasets%2FAC_H1_MFI%2Fdata%2F20050101T000000Z%2C20050102T000000Z%2FMagnitude%3Fformat%3Dtext"


# Add parameters CONCURRENCY = 20, TIMEOUT = 20000, and MAXCONNECTION = 1000 to
datacache.sh.

Max node process is 1.9 GB => max file size = 1900/20 = 95 MB since all files are held in memory.

# Write keepversions() in util.js.  It reads keepversions.txt, which contains regular 
expressions for urls that should be versioned.

# Document servers.txt.  report.htm uses is.  Allow report? to take an input of servers to test.
/report?servers=datacache.org/sync,localhost:8080/sync, localhost:8081/sync&source=...

# Add example of changing file to documentation
curl "http://localhost:8000/sync?forceUpdate=true&source=http://localhost:8000/demo/changingfile.txt"

# Create option for return=bin.  By default it replaces "-" and ":" with spaces
and writes IEEE 64-bit LE Floating Point numbers.  Add recordsPerLine in JSON
output and numberOfRecords.

# Allow input of time2info(line) that returns [timeInteger,timeUnit,ISO 8601
Time] when time integer is computed from timeZero. Use this to compute
startTime, stopTime, timeUnit for each granule.

# Create option for return=binmeta.  Return startTime, stopTime, timeUnit
(smallest in all files), recordsPerLine, numberOfRecords, responseSize, and
meta, and metaJSON if it exists.

# Allow option of input of timeFormat %Y %m %d, etc..  Use this to add startTime
and stopTime to JSON.

# If time stamps are not fractional (%Y [%m %d %h %m %s]), compute required
timeUnit to preserve timestamps when converted to integers.

# If return=bin and timeFormat is given time to ms.  If timeUnit is given,
convert time to time since start.  When streaming, will need to correct times by
finding smallest time unit.

# If return=binmeta return startTime, stopTime, timeUnit, recordsPerLine,
numberOfRecords, responseSize, and meta, and metaJSON if it exists.

= Multi =

// See also
// https://github.com/clmarquart/node-http-load-balancer
// http://sebastian.formzoo.com/2012/04/03/vost-simple-virtual-hosts-load-balancing-with-node-js/
// http://www.contentwithstyle.co.uk/content/nodejs-load-balancer-proof-of-concept/

http://dailyjs.com/2012/03/22/unix-node-processes/
http://stackoverflow.com/questions/2387724/node-js-on-multi-core-machines
http://stackoverflow.com/questions/10663809/how-do-i-use-node-js-clusters-with-my-simple-express-app
http://nodejs.org/docs/latest/api/all.html#all_cluster

A request comes in for
server0/async?source=url1\nurl2

If forceUpdate=true, the scheduler sends a request to 
server1/async?source=url1
server2/async?source=url2
server1/async?source=url1
server2/async?source=url2
..

The user receives the response and it contains the location at which the file was actually cached. 

If forceUpdate=false, async requests are made to all servers for all URLs.  The user gets back the work object from the first responding server with foundInCache=true for each work object.  The user can now grab the files from fast responding servers with cached data.  (I am assuming here that the response time of the server for the work object is correlated with file download time.)

Now that I write this, I realize that this won't have an impact on the scheduler.
It can be implemented by modifying only app.js.  Something like this for forceUpdate=false

userthisserver = false;
responses  = new Array();
badservers = new Array();
z = 0;
var Ns = 0;
var Nb = 0;
var Nu = urls.length;
var deltaT = 0;
var deltaTl = 0;
tic = new Date();
fs.readFile(__dirname+"/servers.txt", "utf8",                                                                                
                function (err, data) {
                         servers = data.split('\n').filter(function(element){return element.length});
                         servers = autotune(servers);

                         if (Ns == 0) usethisserver = true;
                         if (usethisserver) servers.shift(request.headers.host);

                         // Once through to remove bad servers.
                         for (i =0;servers.length;i++) {dorequest(server[i],url[i],i,runall)}}
                         function runall() {
                            Ns = servers.length;
                            for (i =0;i<urls.length;i++) {dorequest(server[mod(i,Ns)],url[mod(i,Ns)],i,checkfinish)}}
                         }
)

function autotune(servers,z) {
  // Look at serverreport.txt and find lines with url hostname, this server hostname, remote server hostname.
  // If one server is much faster than the others, insert it into the list of servers again.
  // If all servers near equal, do nothing.
  // If no url hostname, this server hostname, remoteserver hostname matches, look for matches to 
  // server hostname, remoteserver hostname.
  // Base decision for how many to keep on z/Nu.
}

function serverreport() {
  // Read serverreport.txt and update
  // Save url hostname, url prefix, this server hostname, remote server hostname, average time per request
}

function checkfinished(z) {

  serverreport();
  if (z == Nu) {
     res.send(responses);
  }

  toc = new Date();
  deltaTl = deltaT;
  deltaT = (toc-tic);
  if (deltaT > deltaTl) maxdeltaT = deltaT

  // Some servers are slow.  Fire off more requests!  
  if ((z == Math.floor(Nu/2) && (Nu > 4) && (deltaT > 2*maxdeltaT)) {

     servers = autotune(serversF,z);

     // Remove finished URLs
     urls = removefinished(urls);

     // Should we send req.end() to slow responders?
     for (i =0;i<urls.length;i++) {dorequest(serverR[mod(i,Ns)],urls[mod(i,Ns)],i,checkfinished)}}
   }

  if (Nb == Ns) {
     if (usethisserver == false) {
         usethisserver=true;
         for (i =0;i<urls.length;i++) {dorequest(request.headers.host,url[i],i,callback)}}
     } else {
        res.send(400,"Cannot fulfill request.");
     }
   }
}

function dorequest(server,url,i, callback)  {
   if (response[i]) callback;return; // request already fulfilled.
   var request = require('request');
   tic = new Date();

   // Option to switch to server with the fastest response thus far?

   request(server+"/async?source="+url, function (error, response, body) {
       if (error && callback == runall ) {Nb = Nb+1;servers.remove(i);}
       if (!error && response.statusCode == 200) {
          responses[z] = parseJSON(body)[0];
          times[server] = (toc-tic);
          z=z+1;
     }
     callback;
)
}
    